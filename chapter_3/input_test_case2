import sys


"""
FUNCTIONS
"""
#receives word size, row/col size, and the increment direction of the row/col, and then...
#gives appropriate bounds on search indices
def assign_range(word_len, row_or_col_size, iterator):
     limits = [0, 0];
     
     if (iterator == -1):
          limits[0] = row_or_col_size-1;
          limits[1] = word_len-1;
     elif (iterator == 1):
          limits[1] = (row_or_col_size-word_len);
     else:
          limits[1] = (row_or_col_size-1);
               
     return tuple(limits);  
     
#receives starting points, and the word length - returns the relevant word located in the grid 
def make_string(row_col_start_addr, row_col_inc, word_len, list_input):
     #build the word letter-by-letter by iterating through the grid
     my_word = [0]*word_len;
     last_index = [0, 0];
     for word_idx in range(word_len):
          row_idx, col_idx = row_col_start_addr;
          row_inc, col_inc = row_col_inc;
          
          row_idx, col_idx = row_idx+row_inc*word_idx, col_idx+col_inc*word_idx;
          my_word[word_idx] = list_input[row_idx][col_idx];
          
          last_index = [row_idx+1, col_idx+1];
     
     my_word = ("".join(my_word)).lower();
     return [ [my_word, (row_col_start_addr[0]+1, row_col_start_addr[1]+1) ], [my_word[::-1], last_index] ];
     
#read input file
input_file = open("input_test_case", "r");
input_file = [ line.strip() for line in input_file if (line.strip() != "") ];
case_count = int(input_file[0]);
input_file = input_file[1:];
     
#store all the cases in ram as [(grid, word_dict)]
input_cases = [[] for idx in range(case_count)];

case_counter, file_read_counter = 0, 0;
row_size, col_size, dict_size = 0, 0, 0;
row_read, word_read = 0, 0;
grid, input_dict = [], [];

while(case_counter < case_count):
     #read grid dimensions
     grid_size = input_file[file_read_counter];                  file_read_counter += 1;
     grid_size = grid_size.split(' ');
     row_size, col_size = int(grid_size[0]), int(grid_size[1]);
     
     #read in the grid
     grid = [0]*row_size;
     for row_idx in range(row_size):
          grid[row_idx] = input_file[file_read_counter];         file_read_counter += 1;
          
     #read in the dict_size
     dict_size = int(input_file[file_read_counter]);             file_read_counter += 1;
     
     #read in the dictionary
     input_dict = [0]*dict_size;
     for dict_idx in range(dict_size):
          input_dict[dict_idx] = input_file[file_read_counter];  file_read_counter += 1;
     
     #store case data, reset everything
     input_cases[case_counter] = (tuple(grid), tuple(input_dict));
     
     row_size, col_size, dict_size, row_read, word_read = 0, 0, 0, 0, 0;
     grid, input_dict = [], [];

     #increment case count
     case_counter +=1;

#execute code based on each case
for case_idx in range(case_count):
     grid_tuple, dict_tuple = input_cases[case_idx][0], input_cases[case_idx][1];
     row_len, col_len = len(grid_tuple), len(grid_tuple[0]);
     
     for word in dict_tuple:
          word_location = [-1, -1];
          terminate_word_search = False;
          
          for row_inc in range(0, 1+1):
               row_range = assign_range(len(word), row_len, row_inc);
               for col_inc in range(0, 1+1):
                    col_range = assign_range(len(word), col_len, col_inc);
                    
                    ##########################################
                    #if (col_inc == -1):
                    #     print(word, row_inc, col_inc);
                    #    print(row_range, col_range);
                    ##########################################

                    local_row_inc, local_col_inc = ( 1 if (row_inc >= 0) else -1 ), ( 1 if (row_inc >= 0) else -1 ); 
                    for row_start in range(row_range[0], row_range[1] + local_row_inc, local_row_inc):
                         for col_start in range(col_range[0], col_range[1] + local_col_inc, local_col_inc):
                              
                              '''
                              if (col_inc == -1 and row_inc == 0):
                                   print(word, col_inc, local_col_inc);
                                   print(make_string([row_start, col_start], [row_inc, col_inc], len(word), grid_tuple));
                              '''
                              
                              idx_out = [0, 0];
                              my_list = make_string([row_start, col_start], [row_inc, col_inc], len(word), grid_tuple);
                              for element in my_list:
                                   if (element[0].lower() == word.lower()):
                                        idx_out = element[1];
                                        
                                        bool_1 = word_location[0] < idx_out[0];
                                        bool_2 = (word_location[0] == idx_out[0]) and (word_location[1] < idx_out[1]); 
                                        if (bool_1 or bool_2):
                                             word_location = idx_out;

                         if (terminate_word_search):
                              break;
                                   
                    if(terminate_word_search):
                         break;
               
               if (terminate_word_search):
                    break;

          #print out the data on the screen after having found the word    
          print(str(word_location[0]) + " " + str(word_location[1]));
          
     print("\n");
                                   
